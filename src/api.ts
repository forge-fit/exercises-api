/* tslint:disable */
/* eslint-disable */
/**
 * ExerciseDB Documentation
 * This documentation provides detailed information about the ExerciseDB API available on RapidAPI. It includes various endpoints for accessing exercise data, such as images, equipment lists, and target muscle details, along with examples of required parameters and expected responses.
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetExercisesByEquipment200ResponseInner
 */
export interface GetExercisesByEquipment200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'bodyPart'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'equipment'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExercisesByEquipment200ResponseInner
     */
    'gifUrl'?: string;
}
/**
 * 
 * @export
 * @interface GetImageById404Response
 */
export interface GetImageById404Response {
    /**
     * 
     * @type {string}
     * @memberof GetImageById404Response
     */
    'message'?: string;
}

/**
 * ExercisesApi - axios parameter creator
 * @export
 */
export const ExercisesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all exercises with optional filters
         * @param {number} [offset] Pagination offset
         * @param {number} [limit] Number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercises: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/bodyPartList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific exercise by its ID
         * @param {string} id Unique identifier for the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExerciseById', 'id', id)
            const localVarPath = `/exercises/exercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {string} bodyPart Name of the body part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByBodyPart: async (bodyPart: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyPart' is not null or undefined
            assertParamExists('getExercisesByBodyPart', 'bodyPart', bodyPart)
            const localVarPath = `/exercises/bodyPart/{bodyPart}`
                .replace(`{${"bodyPart"}}`, encodeURIComponent(String(bodyPart)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {GetExercisesByEquipmentEquipmentEnum} equipment Type of equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByEquipment: async (equipment: GetExercisesByEquipmentEquipmentEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipment' is not null or undefined
            assertParamExists('getExercisesByEquipment', 'equipment', equipment)
            const localVarPath = `/exercises/equipment/{equipment}`
                .replace(`{${"equipment"}}`, encodeURIComponent(String(equipment)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by name
         * @param {string} name Name of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getExercisesByName', 'name', name)
            const localVarPath = `/exercises/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of exercises by target muscle
         * @param {string} target Name of the target muscle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByTarget: async (target: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('getExercisesByTarget', 'target', target)
            const localVarPath = `/exercises/target/{target}`
                .replace(`{${"target"}}`, encodeURIComponent(String(target)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/equipmentList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercises/targetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExercisesApi - functional programming interface
 * @export
 */
export const ExercisesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExercisesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all exercises with optional filters
         * @param {number} [offset] Pagination offset
         * @param {number} [limit] Number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExercises(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExercises(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getAllExercises']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBodyPartList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBodyPartList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getBodyPartList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific exercise by its ID
         * @param {string} id Unique identifier for the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExerciseById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExercisesByEquipment200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExerciseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExerciseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {string} bodyPart Name of the body part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesByBodyPart(bodyPart: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesByBodyPart(bodyPart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesByBodyPart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {GetExercisesByEquipmentEquipmentEnum} equipment Type of equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesByEquipment(equipment: GetExercisesByEquipmentEquipmentEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesByEquipment(equipment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesByEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of exercises by name
         * @param {string} name Name of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of exercises by target muscle
         * @param {string} target Name of the target muscle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesByTarget(target: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesByTarget(target, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesByTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesEquipmentList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesEquipmentList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesTargetList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesTargetList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesTargetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExercisesApi - factory interface
 * @export
 */
export const ExercisesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExercisesApiFp(configuration)
    return {
        /**
         * Retrieve all exercises with optional filters
         * @param {number} [offset] Pagination offset
         * @param {number} [limit] Number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercises(offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>> {
            return localVarFp.getAllExercises(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of available body parts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartList(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getBodyPartList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific exercise by its ID
         * @param {string} id Unique identifier for the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetExercisesByEquipment200ResponseInner> {
            return localVarFp.getExerciseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by body part
         * @param {string} bodyPart Name of the body part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByBodyPart(bodyPart: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>> {
            return localVarFp.getExercisesByBodyPart(bodyPart, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by equipment
         * @param {GetExercisesByEquipmentEquipmentEnum} equipment Type of equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByEquipment(equipment: GetExercisesByEquipmentEquipmentEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>> {
            return localVarFp.getExercisesByEquipment(equipment, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by name
         * @param {string} name Name of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>> {
            return localVarFp.getExercisesByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of exercises by target muscle
         * @param {string} target Name of the target muscle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesByTarget(target: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExercisesByEquipment200ResponseInner>> {
            return localVarFp.getExercisesByTarget(target, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesEquipmentList(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getExercisesEquipmentList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available target muscles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesTargetList(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getExercisesTargetList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
export class ExercisesApi extends BaseAPI {
    /**
     * Retrieve all exercises with optional filters
     * @param {number} [offset] Pagination offset
     * @param {number} [limit] Number of results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getAllExercises(offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getAllExercises(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of available body parts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getBodyPartList(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getBodyPartList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific exercise by its ID
     * @param {string} id Unique identifier for the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExerciseById(id: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExerciseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by body part
     * @param {string} bodyPart Name of the body part
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesByBodyPart(bodyPart: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesByBodyPart(bodyPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by equipment
     * @param {GetExercisesByEquipmentEquipmentEnum} equipment Type of equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesByEquipment(equipment: GetExercisesByEquipmentEquipmentEnum, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesByEquipment(equipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by name
     * @param {string} name Name of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesByName(name: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of exercises by target muscle
     * @param {string} target Name of the target muscle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesByTarget(target: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesByTarget(target, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesEquipmentList(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesEquipmentList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available target muscles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesTargetList(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesTargetList(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetExercisesByEquipmentEquipmentEnum = {
    Assisted: 'assisted',
    Band: 'band',
    Barbell: 'barbell',
    BodyWeight: 'body weight',
    BosuBall: 'bosu ball',
    Cable: 'cable',
    Dumbbell: 'dumbbell',
    EllipticalMachine: 'elliptical machine',
    EzBarbell: 'ez barbell',
    Hammer: 'hammer',
    Kettlebell: 'kettlebell',
    LeverageMachine: 'leverage machine',
    MedicineBall: 'medicine ball',
    OlympicBarbell: 'olympic barbell',
    ResistanceBand: 'resistance band',
    Roller: 'roller',
    Rope: 'rope',
    SkiergMachine: 'skierg machine',
    SledMachine: 'sled machine',
    SmithMachine: 'smith machine',
    StabilityBall: 'stability ball',
    StationaryBike: 'stationary bike',
    StepmillMachine: 'stepmill machine',
    Tire: 'tire',
    TrapBar: 'trap bar',
    UpperBodyErgometer: 'upper body ergometer',
    Weighted: 'weighted',
    WheelRoller: 'wheel roller'
} as const;
export type GetExercisesByEquipmentEquipmentEnum = typeof GetExercisesByEquipmentEquipmentEnum[keyof typeof GetExercisesByEquipmentEquipmentEnum];


/**
 * MiscApi - axios parameter creator
 * @export
 */
export const MiscApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageById', 'id', id)
            const localVarPath = `/image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MiscApi - functional programming interface
 * @export
 */
export const MiscApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MiscApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.getImageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MiscApi - factory interface
 * @export
 */
export const MiscApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MiscApiFp(configuration)
    return {
        /**
         * Retrieve an exercise gif from the exercise ID
         * @param {string} id The ID of the exercise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getImageById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of the ExerciseDB Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export class MiscApi extends BaseAPI {
    /**
     * Retrieve an exercise gif from the exercise ID
     * @param {string} id The ID of the exercise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getImageById(id: string, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).getImageById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of the ExerciseDB Server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



